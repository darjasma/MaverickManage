const {expect, assert} = require("chai")
const {loadFixture} = require("@nomicfoundation/hardhat-toolbox/network-helpers");
const helpers = require("@nomicfoundation/hardhat-toolbox/network-helpers");
const {ethers} = require("hardhat")
const {LiFi} = require("@lifi/sdk")

const lifi = new LiFi({
    integrator: "maverickManage"
})

const forkingUrl = require('../hardhat.config').networks.hardhat.forking.url;
const wETHTokenAddress = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2';
const wETHTokenABI = require("../scripts/ABIs/wETH.json");
const IERC20ABI = require('../scripts/ABIs/IERC20.json');
const veMAVTokenABI = require('../scripts/ABIs/veMAV.json')
const IPoolABI = require('../scripts/ABIs/IPool.json')
const IMaverickRouterABI = require('../scripts/ABIs/IRouter.json')
const IMaverickRewardABI = require('../scripts/ABIs/IMaverickReward.json')
const IPositionInspectorABI = require('../scripts/ABIs/IPositionInspectorABI.json')
const veMAVTokenAddress = '0x4949Ac21d5b2A0cCd303C20425eeb29DCcba66D8';
const MAVTokenAddress = '0x7448c7456a97769F6cD04F1E83A4a23cCdC46aBD';
const maverickRouterAddress = '0xbBF1EE38152E9D8e3470Dc47947eAa65DcA94913';

const sleep = (delay) => new Promise((resolve) => setTimeout(resolve, delay))


function parseUnit(number, power) {
    return Number(number) / 10 ** power
}

const getQuote = async (fromChain, toChain, fromToken, toToken, fromAmount, fromAddress, toAddress) => {

    const routeOptions = {
        slippage: 10 / 100
    }
    const RoutesRequest = {
        fromChain: fromChain,
        fromToken: fromToken,
        fromAmount: fromAmount,
        fromAddress: fromAddress,
        toChain: toChain,
        toToken: toToken,
        toAddress: toAddress,
    }
    const result = await lifi.getQuote(RoutesRequest, routeOptions)
    return result.transactionRequest.data;
}


async function deployMaverickManageFixture() {
    const [addr1, addr2] = await ethers.getSigners();
    const swapHelperFactory = await ethers.getContractFactory("SwapHelper");
    const swapHelperInstance = await swapHelperFactory.deploy();
    await swapHelperInstance.waitForDeployment();
    const maverickManageFactory = await ethers.getContractFactory("maverickManage");
    const maverickManage = await maverickManageFactory.deploy('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2');
    await maverickManage.waitForDeployment();
    return {addr1, addr2, maverickManage};
}

describe("maverickManage test for deposit(stake) and withdraw(unstake) Mav/veMav", function(){
    it("Should deposit 1Ether and withdraw it after it's duration", async()=>{
        await helpers.reset(forkingUrl, 18882247);
        // load fixture
        const {addr1, addr2, maverickManage} = await loadFixture(deployMaverickManageFixture);
        //supply wETH
        const wETH = await ethers.getContractAt(wETHTokenABI, wETHTokenAddress);
        expect(
            await wETH.connect(addr1).deposit({value: ethers.parseEther('1')})
        ).to.changeTokenBalance(
            wETH, addr1, ethers.parseUnits('1')
        )
        await wETH.connect(addr1).transfer(maverickManage, ethers.parseEther('1'));
        //deposit wETH on maverickManage and increase the veMAV balance of the contract
        const depositDuration = 20*24*60*60; //20 days(min is one week)
        const doDelegation = false;
        // Notice: Commented swapData is useful for online-testing but saving the blockNumber and
        // corresponded swapData makes it more independent of off-chain resources
        // let swapData = await getQuote('ETH', 'ETH', 'WETH', 'MAV',
        //     ethers.parseEther('1'), await maverickManage.getAddress(),await maverickManage.getAddress());
        let swapData = '0x4630a0d8388ab79e97750c22322187f2cdd3af8a174ce5e6d2e01671df8206e8b3a2768b00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000889d9a5af83525a2275e41464faecccb3337ff60000000000000000000000000000000000000000000000139ed4e3af2d790ca7e0000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000e6d6176657269636b6d616e616765000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000001111111254eeb25477b68fb85ed929f73a960582000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007448c7456a97769f6cd04f1e83a4a23ccdc46abd0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000002e812aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007448c7456a97769f6cd04f1e83a4a23ccdc46abd000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eae0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000139ed4e3af2d790ca7d0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014e00000000000000000000000000000000000000000000000000000000013051204a585e0f7c18e2c414221d6402652d5e0990e5f8c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200a4a5dcbcdf000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007448c7456a97769f6cd04f1e83a4a23ccdc46abd000000000000000000000000d50c68c7fbaee4f469e04cebdcfbf1113b4cdadf0000000000000000000000001111111254eeb25477b68fb85ed929f73a960582ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e9b3012000000000000000000000000000000000000000000000000'
        expect(
            await maverickManage.connect(addr1).deposit(depositDuration, doDelegation, '0x'+swapData.slice(10))
        ).to.changeTokenBalance(wETH, addr1, -ethers.parseEther('1'))
        const veMAV = await ethers.getContractAt(veMAVTokenABI, veMAVTokenAddress);
        expect(BigInt(await veMAV.balanceOf(maverickManage))).to.be.within(BigInt(7295*10**18), BigInt(7296*10**18));
        //withdraw

        // const lockup = await veMAV.lockups(maverickManage, 0);
        // const receivingMavAmount = lockup[0];
        // console.log(String(Number(receivingMavAmount)))
        // swapData = await getQuote('ETH', 'ETH', 'MAV', 'WETH',
        //     ethers.parseEther(String(parseUnit(receivingMavAmount, 18))), await maverickManage.getAddress(),await maverickManage.getAddress());
        swapData = '0x4630a0d87d6be1b7ce38f6941a4713f2adbcc493330104bd85b9ec945a4a991ab88b34c200000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000889d9a5af83525a2275e41464faecccb3337ff600000000000000000000000000000000000000000000000000d71a8003cc921030000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000e6d6176657269636b6d616e616765000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a3078303030303030303030303030303030303030303030303030303030303030303030303030303030300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff0000000000000000000000007448c7456a97769f6cd04f1e83a4a23ccdc46abd000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000013b8126be75fdebae4000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000009e8415565b00000000000000000000000007448c7456a97769f6cd04f1e83a4a23ccdc46abd000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000013b8126be75fdebae400000000000000000000000000000000000000000000000000d71a8003cc920fb00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000007800000000000000000000000000000000000000000000000000000000000000021000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007448c7456a97769f6cd04f1e83a4a23ccdc46abd000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000013b8126be75fdebae40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000254d6176657269636b563100000000000000000000000000000000000000000000000000000000013b8126be75fdebae40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000bbf1ee38152e9d8e3470dc47947eaa65dca949130000000000000000000000002df64ac2e8874c43021675ed7a65d3429e30b96ba0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000300ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000012556e6973776170563300000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000d71a8003cc920fa000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000042a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480001f42260fac5e5542a773aa44fbcfedf7c193bc2c5990001f4c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007448c7456a97769f6cd04f1e83a4a23ccdc46abd000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd00000000000000000000000026c16b6926637cf5eb62c42991b4166add66ff9e000000000000000000000000000000005f3ab423ca7cfd343ceae80be4c9dc99000000000000000000000000000000000000000000000000'
        await helpers.time.increase(depositDuration+3600);
        expect(
            await maverickManage.connect(addr1).withdraw(0, '0x'+swapData.slice(10))
        ).to.changeTokenBalance(wETH, maverickManage, ethers.parseEther('1'));
        expect(await wETH.balanceOf(maverickManage)).to.be.within(BigInt(0.97*10**18), BigInt(10**18));
    }).timeout(200*1000)
})
describe("maverickManage test for addLiquidity to polls and removing from them", function () {
    it("is able to addLiquidity to an erc20-erc20 pool and remove a part of it", async () => {
        await helpers.reset(forkingUrl, 19070011);
        const {addr1, addr2, maverickManage} = await deployMaverickManageFixture();
        //supply WETH
        const wETH = await ethers.getContractAt(wETHTokenABI, wETHTokenAddress);
        await wETH.connect(addr1).deposit({value: ethers.parseEther('2')})
        await wETH.connect(addr1).transfer(maverickManage, ethers.parseEther('2'));
        //addLiquidity parameters
        let poolAddress = '0x53dc703B78794b61281812f3a901918253BeeFee'; //dai-usdc
        let tokenId = 0;
        let params = [[1, 0, true, ethers.parseUnits('100', 18), ethers.parseUnits('100', 6)]];
        let minTokenAAmount = 0;
        let minTokenBAmount = 0;
        let deadline = (await ethers.provider.getBlock('latest')).timestamp+3600;
        // const daiAddress = '0x6B175474E89094C44Da98b954EedeAC495271d0F';
        // const usdcAddress = '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48';
        let swapDataA, swapDataB;
        // let swapDataA = await getQuote('ETH', 'ETH', 'WETH',daiAddress, ethers.parseEther('1'), await maverickManage.getAddress(),await  maverickManage.getAddress());
        // let swapDataB = await getQuote('ETH', 'ETH', 'WETH',usdcAddress, ethers.parseEther('1'), await maverickManage.getAddress(), await maverickManage.getAddress());
        // console.log(`SwapDataA:\n${swapDataA}\n\nSwapDataB:\n${swapDataB}\n`);
        swapDataA = '0x4630a0d8b3348f5b8f8cee86b8ea7ec4302dbcce559a31e05b5cf678edc792057fecaf0d00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000564db7a11653228164fd03bca60465270e67b3d7000000000000000000000000000000000000000000000075d0eb6986d02769590000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000e6d6176657269636b6d616e616765000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000001111111254eeb25477b68fb85ed929f73a960582000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a8e449022e0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000075d0eb6986d02769580000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000180000000000000000000000060594a405d53811d3bc4766596efd80fd545a2702e9b3012000000000000000000000000000000000000000000000000'
        swapDataB = '0x4630a0d8d4a1cb481bbcc7eb1d0564962f719efa022b6c1f251c93f594fa5ef42f84d53400000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000564db7a11653228164fd03bca60465270e67b3d70000000000000000000000000000000000000000000000000000000081a6b7c40000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000e6d6176657269636b6d616e616765000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a307830303030303030303030303030303030303030303030303030303030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000080eba3855878739f4710233a8a19d89bdd2ffb8e00000000000000000000000080eba3855878739f4710233a8a19d89bdd2ffb8e000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000604b35d7e73000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000007095ea7b3010001ffffffffffc02aaa39b223fe8d0a0e5c4f27ead9083c756cc219198595a30283ffffffff831111111254eeb25477b68fb85ed929f73a9605829bd3b227018302ffffffff036675a323dedb77822fcf39eaa9d682f6abe72555ddcd52200103ffffffffff037e7d64d987cab6eed08a191c4c2459daf2f8ed0ba9059cbb010403ffffffffffa0b86991c6218b36c1d19d4a2e9eb0ce3606eb486e7a43a3010305ffffffff037e7d64d987cab6eed08a191c4c2459daf2f8ed0b241c59120103ffffffffffff7e7d64d987cab6eed08a191c4c2459daf2f8ed0b000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000000200000000000000000000000001111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022812aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000007d585b0e27bbb3d981b7757115ec11f47c4769940000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000007e64c4910000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009b00000000000000000000000000000000000000000000000000007d00001a0020d6bdbf78c02aaa39b223fe8d0a0e5c4f27ead9083c756cc202a00000000000000000000000000000000000000000000000000000000000000001ee63c1e58088e6a0c2ddd26feeb64f039a2c41296fcb3f5640c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21111111254eeb25477b68fb85ed929f73a9605820000000000d550433700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eae00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000081a6b7c300000000000000000000000000000000000000000000000000000000'
        const positionInspector = await ethers.getContractAt(IPositionInspectorABI, '0x456A37144162900799f405be34f815dE7C3DA53C');
        const pool = await ethers.getContractAt(IPoolABI, poolAddress);
        const wethBeforeAddLiquidity = await wETH.balanceOf(maverickManage);
        await maverickManage.connect(addr1).addLiquidity(
            false, poolAddress, tokenId, params, minTokenAAmount, minTokenBAmount, deadline, '0x'+swapDataA.slice(10), '0x'+swapDataB.slice(10)
        )
        let filter = maverickManage.filters.AddLiquidity
        let events = await maverickManage.queryFilter(filter, -1)
        let binId;
        tokenId = events[0].args.receivingTokenId;
        binId = events[0].args.binDeltas[0][3];
        let firstReserve, secondReserve;
        firstReserve = await positionInspector.addressBinReservesAllKindsAllTokenIds(maverickManage, pool);
        swapDataA = '0x4630a0d82c3551d2b32d09350611bca4a0345861e896d4ff32556dc09eecabcca75a5f9100000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000564db7a11653228164fd03bca60465270e67b3d700000000000000000000000000000000000000000000000000102d83adc951420000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000e6d6176657269636b6d616e616765000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a3078303030303030303030303030303030303030303030303030303030303030303030303030303030300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000012438ed17390000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000000000000000000000000000000102d83adc9514200000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eae0000000000000000000000000000000000000000000000000000000065afddb000000000000000000000000000000000000000000000000000000000000000030000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000383518188c0c6d7730d91b2c03a03c837814a899000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000'
        swapDataB = '0x4630a0d848ac8da0fb5700137fc0a8b65051d52b80c1f883e1dc60647622aba7b385d1fc00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000564db7a11653228164fd03bca60465270e67b3d700000000000000000000000000000000000000000000000000107dc673387faf0000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000e6d6176657269636b6d616e616765000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a3078303030303030303030303030303030303030303030303030303030303030303030303030303030300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000014438ed1739000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000107dc673387faf00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eae0000000000000000000000000000000000000000000000000000000065afddb10000000000000000000000000000000000000000000000000000000000000004000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000006b3595068778dd592e39a122f4f5a5cf09c90fe20000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000'
        const wethAfterAddLiquidity = await wETH.balanceOf(maverickManage);
        await maverickManage.connect(addr1).removeLiquidity(
            2,
            poolAddress,
            await addr1.getAddress(),
            tokenId,
            [{binId: binId, amount:ethers.parseUnits('70', 18)}],
            0,
            0,
            BigInt(1e20),
            '0x'+swapDataA.slice(10),
            '0x'+swapDataB.slice(10)
        )
        const wethAfterRemoveLiquidity = await wETH.balanceOf(maverickManage);
        secondReserve = await positionInspector.addressBinReservesAllKindsAllTokenIds(maverickManage, pool);
        expect(firstReserve[1]-secondReserve[1]).to.equal(BigInt(70.000001*10**6));
        expect(firstReserve[0]-secondReserve[0]).to.be.within(BigInt(13*10**18), BigInt(14*10**18));
        expect(wethBeforeAddLiquidity-wethAfterAddLiquidity).equals(BigInt(2*10**18));
        expect(wethAfterRemoveLiquidity-wethAfterAddLiquidity).to.be.within(BigInt(0.009*10**18),  BigInt(0.01*10**18));
    }).timeout(2000 * 1000)
    it('is able to addLiquidity to eth-erc20 pool and remove a part of it', async()=>{
        await helpers.reset(forkingUrl, 19071112);
        const {addr1, addr2, maverickManage} = await deployMaverickManageFixture();
        //supply WETH
        const wETH = await ethers.getContractAt(wETHTokenABI, wETHTokenAddress);
        await wETH.connect(addr1).deposit({value: ethers.parseEther('5')})
        await wETH.connect(addr1).transfer(maverickManage, ethers.parseEther('5'));
        //addLiquidity parameters
        let poolAddress = '0x7e3f8a54f93471BFbD37641B230920fa1c8B27C3'; //mav-eth
        let tokenId = 0;
        let params = [[1, 0, true, ethers.parseUnits('1', 18), ethers.parseUnits('2000', 18)]];
        let minTokenAAmount = 0;
        let minTokenBAmount = 0;
        let deadline = (await ethers.provider.getBlock('latest')).timestamp+3600;
        // let swapDataA = await getQuote('ETH', 'ETH', 'WETH', 'ETH', ethers.parseEther('1'), await maverickManage.getAddress(),await  maverickManage.getAddress());
        // let swapDataB = await getQuote('ETH', 'ETH', 'WETH','MAV', ethers.parseEther('0.01'), await maverickManage.getAddress(), await maverickManage.getAddress());
        // console.log(`SwapDataA:\n${swapDataA}\n\nSwapDataB:\n${swapDataB}\n`);
        let swapDataA = '0x4630a0d8fb62fe7f8773dde1fe3b49c9408ec061a69766dda247c5ed2ad678e3019caf3900000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000009abb5861e3a1edf19c51f8ac74a81782e94f8fdc0000000000000000000000000000000000000000000000000dcef33a6f8380000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000e6d6176657269636b6d616e616765000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a307830303030303030303030303030303030303030303030303030303030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000080eba3855878739f4710233a8a19d89bdd2ffb8e00000000000000000000000080eba3855878739f4710233a8a19d89bdd2ffb8e000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000244b35d7e73000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000042e1a7d4d0100ffffffffffffc02aaa39b223fe8d0a0e5c4f27ead9083c756cc219198595a30081ffffffffff1231deb6f5749ef6ce6943a275a1d3e7486f4eae6e7a43a3010002ffffffff027e7d64d987cab6eed08a191c4c2459daf2f8ed0b241c59120102ffffffffffff7e7d64d987cab6eed08a191c4c2459daf2f8ed0b0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000dcef33a6f83800000000000000000000000000000000000000000000000000000000000'
        let swapDataB = '0x4630a0d8b4b1c68b21c1fb99cf0b2729fa948d83bdda66391d07c18588b5341906a73b5800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000009abb5861e3a1edf19c51f8ac74a81782e94f8fdc0000000000000000000000000000000000000000000000021e3bf8edcbda72e40000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000e6d6176657269636b6d616e616765000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000001111111254eeb25477b68fb85ed929f73a960582000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007448c7456a97769f6cd04f1e83a4a23ccdc46abd000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000002e812aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007448c7456a97769f6cd04f1e83a4a23ccdc46abd000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eae000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000021e3bf8edcbda72e40000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014e00000000000000000000000000000000000000000000000000000000013051204a585e0f7c18e2c414221d6402652d5e0990e5f8c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200a4a5dcbcdf000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007448c7456a97769f6cd04f1e83a4a23ccdc46abd0000000000000000000000007e3f8a54f93471bfbd37641b230920fa1c8b27c30000000000000000000000001111111254eeb25477b68fb85ed929f73a960582ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e9b3012000000000000000000000000000000000000000000000000'
        const wethBeforeAddLiquidity = await wETH.balanceOf(maverickManage);
        await maverickManage.connect(addr1).addLiquidity(
            true, poolAddress, tokenId, params, minTokenAAmount, minTokenBAmount, deadline, '0x'+swapDataA.slice(10), '0x'+swapDataB.slice(10)
        )
        const wethAfterAddLiquidity = await wETH.balanceOf(maverickManage);
        const pool = await ethers.getContractAt(IPoolABI, poolAddress);
        let firstReserve, secondReserve;
        const positionInspector = await ethers.getContractAt(IPositionInspectorABI, '0x456A37144162900799f405be34f815dE7C3DA53C');
        firstReserve = await positionInspector.addressBinReservesAllKindsAllTokenIds(maverickManage, pool);
        let filter = maverickManage.filters.AddLiquidity
        let events = await maverickManage.queryFilter(filter, -1)
        let binId;
        tokenId = events[0].args.receivingTokenId;
        binId = events[0].args.binDeltas[0][3];
        // swapDataA = await getQuote('ETH', 'ETH', 'MAV','WETH', ethers.parseEther('0.00002'), await maverickManage.getAddress(), await maverickManage.getAddress());
        // swapDataB = await getQuote('ETH', 'ETH', 'ETH','WETH', ethers.parseEther('0.00001'), await maverickManage.getAddress(),await  maverickManage.getAddress());
        // console.log(`SwapDataA:\n${swapDataA}\n\nSwapDataB:\n${swapDataB}\n`);
        swapDataA = '0x4630a0d861c6174c96eaaa3b6969eaaf498777a75f17e7fd975582f41c7c973563b69c7000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000009abb5861e3a1edf19c51f8ac74a81782e94f8fdc000000000000000000000000000000000000000000000000000000012b6262a60000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000e6d6176657269636b6d616e616765000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000007448c7456a97769f6cd04f1e83a4a23ccdc46abd000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000012309ce5400000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000002e812aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000007448c7456a97769f6cd04f1e83a4a23ccdc46abd000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eae000000000000000000000000000000000000000000000000000012309ce54000000000000000000000000000000000000000000000000000000000012b6262a60000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014e00000000000000000000000000000000000000000000000000000000013051204a585e0f7c18e2c414221d6402652d5e0990e5f87448c7456a97769f6cd04f1e83a4a23ccdc46abd00a4a5dcbcdf0000000000000000000000007448c7456a97769f6cd04f1e83a4a23ccdc46abd000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000ebba2b04ec1b212a7f33b7f8b51694e647fc347b0000000000000000000000001111111254eeb25477b68fb85ed929f73a960582ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e9b3012000000000000000000000000000000000000000000000000'
        swapDataB = '0x4630a0d88fbd049d840d9069191cce8c848bcd9e51dbfaf154c1208e82e8a7ba77d6284200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000009abb5861e3a1edf19c51f8ac74a81782e94f8fdc000000000000000000000000000000000000000000000000000009000df61af70000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000e6d6176657269636b6d616e616765000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000009184e72a00000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001247ff36ab5000000000000000000000000000000000000000000000000000009000df61af700000000000000000000000000000000000000000000000000000000000000800000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eae0000000000000000000000000000000000000000000000000000000065b011d20000000000000000000000000000000000000000000000000000000000000004000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000'
        await maverickManage.connect(addr1).removeLiquidity(
            1,
            poolAddress,
            await addr1.getAddress(),
            tokenId,
            [{binId: binId, amount:ethers.parseUnits('0.0008', 18)}],
            0,
            0,
            BigInt(1e20),
            '0x'+swapDataA.slice(10),
            '0x'+swapDataB.slice(10)
        )
        const wethAfterRemoveLiquidity = await wETH.balanceOf(maverickManage);
        secondReserve = await positionInspector.addressBinReservesAllKindsAllTokenIds(maverickManage, pool);
        expect(firstReserve[1]-secondReserve[1]).to.be.greaterThan(BigInt(700000*10**6));
        expect(firstReserve[0]-secondReserve[0]).to.equal(BigInt(0.000800000000000001*10**18));
        expect(wethBeforeAddLiquidity-wethAfterAddLiquidity).equals(BigInt(1.01*10**18))
        expect(wethAfterRemoveLiquidity-wethAfterAddLiquidity).equals(BigInt(0.000000005048075745*10**18))
    })
    it('is able to addLiquidity to boosted erc20-erc20 pool and remove a part of it', async () => {
        await helpers.reset(forkingUrl, 19072026);
        const {addr1, addr2, maverickManage} = await deployMaverickManageFixture();
        //supply WETH
        const wETH = await ethers.getContractAt(wETHTokenABI, wETHTokenAddress);
        await wETH.connect(addr1).deposit({value: ethers.parseEther('10')})
        await wETH.connect(addr1).transfer(maverickManage, ethers.parseEther('10'));
        //addLiquidity parameters
        let poolAddress = '0x050EbE3dbB4B3a3526735B04Cc3D96C80609ee7E'; //gho-usdc
        let tokenId = 0;
        let params = [[1, tokenId, true, ethers.parseUnits('4000', 18), ethers.parseUnits('4000', 6)]];
        let minTokenAAmount = 0;
        let minTokenBAmount = 0;
        const usdcAddress = '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48';
        let deadline = (await ethers.provider.getBlock('latest')).timestamp+3600;
        // let swapDataA = await getQuote('ETH', 'ETH', 'WETH', ghoAddress, ethers.parseEther('3'), await maverickManage.getAddress(), await maverickManage.getAddress());
        // let swapDataB = await getQuote('ETH', 'ETH', 'WETH', usdcAddress, ethers.parseEther('3'), await maverickManage.getAddress(), await maverickManage.getAddress());
        // console.log(`SwapDataA:\n${swapDataA}\n\nSwapDataB:\n${swapDataB}\n`);
        let swapDataA = '0x4630a0d8848c7cfa407affa2b477112fc39c145698e33eb3ffec2017f84b25585926b0e800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000009abb5861e3a1edf19c51f8ac74a81782e94f8fdc0000000000000000000000000000000000000000000001695f14639bf3bfa0a40000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000e6d6176657269636b6d616e616765000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000001111111254eeb25477b68fb85ed929f73a960582000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000040d16fc0246ad3160ccc09b8d0d3a2cd28ae6c2f00000000000000000000000000000000000000000000000029a2241af62c000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000002e812aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000040d16fc0246ad3160ccc09b8d0d3a2cd28ae6c2f000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eae00000000000000000000000000000000000000000000000029a2241af62c00000000000000000000000000000000000000000000000001695f14639bf3bfa0a40000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015800000000000000000000000000000000000000000000013a00010c0000c200a007e5c0d200000000000000000000000000000000000000000000000000009e00004f02a000000000000000000000000000000000000000000000000000000001848bf72bee63c1e501c7bbec68d12a0d1830360f8ec58fa599ba1b0e9bc02aaa39b223fe8d0a0e5c4f27ead9083c756cc200a0fbb7cd06008353157092ed8be69a9df8f95af097bbf33cb2af0000000000000000000005d9dac17f958d2ee523a2206206994597c13d831ec740d16fc0246ad3160ccc09b8d0d3a2cd28ae6c2f00a0f2fa6b6640d16fc0246ad3160ccc09b8d0d3a2cd28ae6c2f00000000000000000000000000000000000000000000016b2ff59dffca856a22000000000000000046a63a0790b5b4a480a06c4eca2740d16fc0246ad3160ccc09b8d0d3a2cd28ae6c2f1111111254eeb25477b68fb85ed929f73a96058200000000000000002e9b3012000000000000000000000000000000000000000000000000'
        let swapDataB = '0x4630a0d8ae8fb26a5392ab45eee027900bda68a2f5ec23bac66254b5f65a6f773ff7dcbe00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000009abb5861e3a1edf19c51f8ac74a81782e94f8fdc0000000000000000000000000000000000000000000000000000000185fcdcc20000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000e6d6176657269636b6d616e616765000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000001111111254eeb25477b68fb85ed929f73a960582000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000029a2241af62c000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a8e449022e00000000000000000000000000000000000000000000000029a2241af62c00000000000000000000000000000000000000000000000000000000000185fcdcc20000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000180000000000000000000000088e6a0c2ddd26feeb64f039a2c41296fcb3f56402e9b3012000000000000000000000000000000000000000000000000'
        const wethBeforeAddLiquidity = await wETH.balanceOf(maverickManage);
        await maverickManage.connect(addr1).addLiquidity(
            false,
            poolAddress,
            tokenId,
            params,
            minTokenAAmount,
            minTokenBAmount,
            deadline,
            '0x' + swapDataA.slice(10),
            '0x' + swapDataB.slice(10)
        )
        const wethAfterAddLiquidity = await wETH.balanceOf(maverickManage);
        const pool = await ethers.getContractAt(IPoolABI, poolAddress);
        const positionInspector = await ethers.getContractAt(IPositionInspectorABI, '0x456A37144162900799f405be34f815dE7C3DA53C');
        let firstReserve, secondReserve;
        firstReserve = await positionInspector.addressBinReservesAllKindsAllTokenIds(maverickManage, pool);
        let filter = maverickManage.filters.AddLiquidity
        let events = await maverickManage.queryFilter(filter, -1)
        let binId;
        tokenId = events[0].args.receivingTokenId;
        binId = events[0].args.binDeltas[0][3];
        // swapDataA = await getQuote('ETH', 'ETH', ghoAddress, 'WETH', ethers.parseEther('10', 18), await maverickManage.getAddress(), await maverickManage.getAddress());
        // swapDataB = await getQuote('ETH', 'ETH', usdcAddress, 'WETH', ethers.parseUnits('10', 6), await maverickManage.getAddress(), await maverickManage.getAddress())
        // console.log(`SwapDataA:\n${swapDataA}\n\nSwapDataB:\n${swapDataB}\n`);
        let _swapDatas = []
        let swapIncludesETH = [];
        let rewardTokens = []
        await maverickManage.connect(addr1).claimBoostedPositionRewards(
            '0x3bF6412b7e8A4DF2795B5ac3a6283262Fec1FEc1',
            _swapDatas,
            swapIncludesETH,
            rewardTokens);
        swapDataA = '0x4630a0d8f59a2432805ff84db48ea038346008aefe1ca9f61436d63af785fc4dc94efa3900000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000009abb5861e3a1edf19c51f8ac74a81782e94f8fdc000000000000000000000000000000000000000000000000000fd2f2b1c71dda0000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000e6d6176657269636b6d616e616765000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000001111111254eeb25477b68fb85ed929f73a96058200000000000000000000000040d16fc0246ad3160ccc09b8d0d3a2cd28ae6c2f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c8e449022e0000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000000000000000000000000000000fd32b801b821a00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000002000000000000000000000000383e7acd889bf57b0d79a584009cb570534ab518800000000000000000000000c7bbec68d12a0d1830360f8ec58fa599ba1b0e9b2e9b3012000000000000000000000000000000000000000000000000'
        swapDataB = '0x4630a0d898d84f6e17869df545c2910f9db4b717a6dc4fc7a211fe2845ea7335dd25431200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000009abb5861e3a1edf19c51f8ac74a81782e94f8fdc0000000000000000000000000000000000000000000000000010107b3fc6dd540000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000e6d6176657269636b6d616e616765000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000001111111254eeb25477b68fb85ed929f73a960582000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c80502b1c5000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000010107b3fc6dd540000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000003b6d0340b4e16d0168e52d35cacd2c6185b44281ec28c9dc2e9b3012000000000000000000000000000000000000000000000000'
        await maverickManage.connect(addr1).removeLiquidity(
            2,
            poolAddress,
            await addr1.getAddress(),
            tokenId,
            [{binId: binId, amount: ethers.parseUnits('100', 18)}],
            0,
            0,
            BigInt(1e20),
            '0x' + swapDataA.slice(10),
            '0x' + swapDataB.slice(10)
        )
        const wethAfterRemoveLiquidity = await wETH.balanceOf(maverickManage);
        secondReserve = await positionInspector.addressBinReservesAllKindsAllTokenIds(maverickManage, pool);
        expect(firstReserve[1]-secondReserve[1]).to.equal(100000001);
        expect(firstReserve[0]-secondReserve[0]).to.be.within(BigInt(41*10**18), BigInt(42*10**18));
        expect(wethBeforeAddLiquidity-wethAfterAddLiquidity).equals(BigInt(6*10**18))
        expect(wethAfterRemoveLiquidity-wethAfterAddLiquidity).to.be.within(BigInt(0.009*10**18),  BigInt(0.01*10**18))
    });
    it('is able to addLiquidity to a boosted erc20-eth pool, swap on it so the fee rewards get added to the position', async()=>{
        //init
        const {addr1, addr2, maverickManage} = await deployMaverickManageFixture();
        let addr1Address = await addr1.getAddress(), addr2Address = await addr2.getAddress();
        const positionInspector = await ethers.getContractAt(IPositionInspectorABI, '0x456A37144162900799f405be34f815dE7C3DA53C');
        const wETH = await ethers.getContractAt(wETHTokenABI, wETHTokenAddress);
        const maverickRouter = await ethers.getContractAt(IMaverickRouterABI, maverickRouterAddress)
        let poolAddress = '0x0eB1C92f9f5EC9D817968AfDdB4B46c564cdeDBe'; //wstETH-ETH
        let wstETHAddress = '0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0'
        let rewardAddress = '0x78Af919881dc219aFbDD39Ecb7A7b9F840C61797'
        let wstETH = await ethers.getContractAt(IERC20ABI, wstETHAddress)
        let reward = await ethers.getContractAt(IMaverickRewardABI, rewardAddress)
        const bigWstETHHolder = await ethers.getImpersonatedSigner('0x176F3DAb24a159341c0509bB36B833E7fdd0a132')


        async function balances(address){
            let eth = await ethers.provider.getBalance(address);
            let weth = await wETH.balanceOf(address);
            let wsteth = await wstETH.balanceOf(address)
            return {eth: eth, weth: weth, wsteh: wsteth}
        }
        //Supply Weth
        const wETHSupplyAmount = ethers.parseEther('2');
        expect(await wETH.connect(addr1).deposit({value: wETHSupplyAmount})).to.changeTokenBalance(
            wETH, addr1, wETHSupplyAmount
        );
        expect(await wETH.transfer(maverickManage, wETHSupplyAmount)).to.changeTokenBalances(
            wETH,[addr1, maverickManage], [-wETHSupplyAmount, wETHSupplyAmount])
        //addLiquidity
        let tokenId = 0, kind = 1, isDelta = true, minTokenAAMount = 0, minTokenBAMount = 0;
        let deltaA = ethers.parseEther('0.5'), deltaB = ethers.parseEther('0.5');
        let params = [[kind, tokenId, isDelta, deltaA, deltaB]]
        let swapDataA, swapDataB;
        let maverickManageAddress = await maverickManage.getAddress()
        let deadline = (await ethers.provider.getBlock('latest')).timestamp+3600;
        swapDataA = await getQuote('ETH', 'ETH', 'WETH', 'wstETH',
                                    ethers.parseEther('1'), maverickManageAddress, maverickManageAddress)
        swapDataB = await getQuote('ETH', 'ETH', 'WETH', 'ETH',
                                    ethers.parseEther('1'), maverickManageAddress, maverickManageAddress);
        expect(await maverickManage.connect(addr1).addLiquidity(
            true, //includes eth
            poolAddress,
            tokenId,
            params,
            minTokenAAMount,
            minTokenBAMount,
            deadline,
            '0x'+swapDataA.slice(10),
            '0x'+swapDataB.slice(10),
        )).to.changeTokenBalance(wETH, maverickManage, ethers.parseEther('2'));
        const afterAddLiquidityReserve = await positionInspector.addressBinReservesAllKindsAllTokenIds(maverickManage, poolAddress)
        assert(afterAddLiquidityReserve[0]===BigInt(0.5*10**18)||afterAddLiquidityReserve[1]===BigInt(0.5*10**18), "Not enough return!")
        let addLiquidityFilter = maverickManage.filters.AddLiquidity;
        let events = await maverickManage.queryFilter(addLiquidityFilter, -1);
        tokenId = events[0].args.receivingTokenId;
        let binId = events[0].args.binDeltas[0][3];
        //Making some swaps on the position
        const wstETHSwapAmount = ethers.parseEther('400')
        await wstETH.connect(bigWstETHHolder).approve(maverickRouter, wstETHSwapAmount);
        let beforeFirstSwapBalances = await balances(bigWstETHHolder)
        expect(await maverickRouter.connect(bigWstETHHolder).exactInputSingle(
            [
                wstETHAddress,
                wETHTokenAddress,
                poolAddress,
                bigWstETHHolder,
                deadline,
                wstETHSwapAmount,
                0, //minAIn
                0, //minBIn
            ]
        )).to.changeTokenBalance(wstETH, bigWstETHHolder, -wstETHSwapAmount)
        let afterFirstSwapBalances = await balances(bigWstETHHolder)
        expect(afterFirstSwapBalances.wsteh-beforeFirstSwapBalances.wsteh).equals(BigInt(-400*10**18))
        expect(afterFirstSwapBalances.weth-beforeFirstSwapBalances.weth).within(BigInt(461*10**18), BigInt(462*10**18))//461ETH
        // let afterFirstSwapReserve = await positionInspector.addressBinReservesAllKindsAllTokenIds(
        //     maverickManage, poolAddress
        // )
        // console.log(afterFirstSwapReserve)
        expect(await maverickRouter.connect(bigWstETHHolder).exactInputSingle(
            [
                wETHTokenAddress,
                wstETHAddress,
                poolAddress,
                bigWstETHHolder,
                deadline,
                wstETHSwapAmount,
                0, //minAIn
                0, //minBIn
            ],
            {value: wstETHSwapAmount}
        )).to.changeTokenBalance(wstETH, bigWstETHHolder,705)
        let afterSecondSwapBalances = await balances(bigWstETHHolder)
        // console.log(afterSecondSwapBalances)
        expect(afterFirstSwapBalances.eth-afterSecondSwapBalances.eth).within(BigInt(400*10**18), BigInt(400.1e18))
        expect(afterSecondSwapBalances.wsteh-afterFirstSwapBalances.wsteh).within(BigInt(346*10**18), BigInt(347e18))
        let afterSecondSwapReserve = await positionInspector.addressBinReservesAllKindsAllTokenIds(
            maverickManage,
            poolAddress
        )
        expect(afterSecondSwapReserve[0]-afterAddLiquidityReserve[0]).within(BigInt(0.12e18), BigInt(0.13e18))
        expect(afterSecondSwapReserve[1]-afterAddLiquidityReserve[1]).within(BigInt(-0.14e18), BigInt(-0.13e18))
    }).timeout(200*1e3)
})