const {expect} = require("chai")
const {loadFixture} = require("@nomicfoundation/hardhat-toolbox/network-helpers");
const helpers = require("@nomicfoundation/hardhat-toolbox/network-helpers");
const {ethers} = require("hardhat")
const {LiFi} = require("@lifi/sdk")

const lifi = new LiFi({
    integrator: "maverickManage"
})

const forkingUrl = require('../hardhat.config').networks.hardhat.forking.url;
const wETHTokenAddress = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2';
const wETHTokenABI = require("../scripts/ABIs/wETH.json");
const IERC20ABI = require('../scripts/ABIs/IERC20.json');
const veMAVTokenABI = require('../scripts/ABIs/veMAV.json')
const veMAVTokenAddress = '0x4949Ac21d5b2A0cCd303C20425eeb29DCcba66D8';
const MAVTokenAddress = '0x7448c7456a97769F6cD04F1E83A4a23cCdC46aBD';


function parseUnit(number, power) {
    return Number(number) / 10 ** power
}

const getQuote = async (fromChain, toChain, fromToken, toToken, fromAmount, fromAddress, toAddress) => {

    const routeOptions = {
        slippage: 10/100
    }
    const RoutesRequest  = {
        fromChain: fromChain,
        fromToken: fromToken,
        fromAmount: fromAmount,
        fromAddress: fromAddress,
        toChain: toChain,
        toToken: toToken,
        toAddress: toAddress,
    }
    const result = await lifi.getQuote(RoutesRequest, routeOptions)
    return result.transactionRequest.data;
}


describe("maverickManage test", function(){
    async function deployMaverickManageFixture(){
        const [addr1, addr2] = await ethers.getSigners();
        const swapHelperFactory = await ethers.getContractFactory("SwapHelper");
        const swapHelperInstance = await swapHelperFactory.deploy();
        await swapHelperInstance.waitForDeployment();
        const maverickManageFactory = await ethers.getContractFactory("maverickManage");
        const maverickManage = await maverickManageFactory.deploy();
        await maverickManage.waitForDeployment();
        return {addr1, addr2, maverickManage};
    }

    it("Should deposit 1Ether and withdraw it after it's duration", async()=>{
        await helpers.reset(forkingUrl, 18882247);
        // load fixture
        const {addr1, addr2, maverickManage} = await loadFixture(deployMaverickManageFixture);
        //supply wETH
        const wETH = await ethers.getContractAt(wETHTokenABI, wETHTokenAddress);
        expect(
            await wETH.connect(addr1).deposit({value: ethers.parseEther('1')})
        ).to.changeTokenBalance(
            wETH, addr1, ethers.parseUnits('1')
        )
        await wETH.connect(addr1).transfer(maverickManage, ethers.parseEther('1'));
        //deposit wETH on maverickManage and increase the veMAV balance of the contract
        const depositDuration = 20*24*60*60; //20 days(min is one week)
        const doDelegation = false;
        // Notice: Commented swapData is useful for online-testing but saving the blockNumber and
        // corresponded swapData makes it more independent of off-chain resources

        // let swapData = await getQuote('ETH', 'ETH', 'WETH', 'MAV',
        //     ethers.parseEther('1'), await maverickManage.getAddress(),await maverickManage.getAddress());
        let swapData = '0x4630a0d8388ab79e97750c22322187f2cdd3af8a174ce5e6d2e01671df8206e8b3a2768b00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000889d9a5af83525a2275e41464faecccb3337ff60000000000000000000000000000000000000000000000139ed4e3af2d790ca7e0000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000e6d6176657269636b6d616e616765000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000001111111254eeb25477b68fb85ed929f73a960582000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007448c7456a97769f6cd04f1e83a4a23ccdc46abd0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000002e812aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007448c7456a97769f6cd04f1e83a4a23ccdc46abd000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eae0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000139ed4e3af2d790ca7d0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014e00000000000000000000000000000000000000000000000000000000013051204a585e0f7c18e2c414221d6402652d5e0990e5f8c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200a4a5dcbcdf000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007448c7456a97769f6cd04f1e83a4a23ccdc46abd000000000000000000000000d50c68c7fbaee4f469e04cebdcfbf1113b4cdadf0000000000000000000000001111111254eeb25477b68fb85ed929f73a960582ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e9b3012000000000000000000000000000000000000000000000000'
        expect(
            await maverickManage.connect(addr1).deposit(depositDuration, doDelegation, '0x'+swapData.slice(10))
        ).to.changeTokenBalance(wETH, addr1, -ethers.parseEther('1'))
        const veMAV = await ethers.getContractAt(veMAVTokenABI, veMAVTokenAddress);
        console.log(`veMAV balance after deposit: ${parseUnit(await veMAV.balanceOf(maverickManage), 18)}`);
        //withdraw

        // const lockup = await veMAV.lockups(maverickManage, 0);
        // const receivingMavAmount = lockup[0];
        // console.log(String(Number(receivingMavAmount)))
        // swapData = await getQuote('ETH', 'ETH', 'MAV', 'WETH',
        //     ethers.parseEther(String(parseUnit(receivingMavAmount, 18))), await maverickManage.getAddress(),await maverickManage.getAddress());
        swapData = '0x4630a0d87d6be1b7ce38f6941a4713f2adbcc493330104bd85b9ec945a4a991ab88b34c200000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000889d9a5af83525a2275e41464faecccb3337ff600000000000000000000000000000000000000000000000000d71a8003cc921030000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000e6d6176657269636b6d616e616765000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a3078303030303030303030303030303030303030303030303030303030303030303030303030303030300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff0000000000000000000000007448c7456a97769f6cd04f1e83a4a23ccdc46abd000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000013b8126be75fdebae4000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000009e8415565b00000000000000000000000007448c7456a97769f6cd04f1e83a4a23ccdc46abd000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000013b8126be75fdebae400000000000000000000000000000000000000000000000000d71a8003cc920fb00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000007800000000000000000000000000000000000000000000000000000000000000021000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007448c7456a97769f6cd04f1e83a4a23ccdc46abd000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000013b8126be75fdebae40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000254d6176657269636b563100000000000000000000000000000000000000000000000000000000013b8126be75fdebae40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000bbf1ee38152e9d8e3470dc47947eaa65dca949130000000000000000000000002df64ac2e8874c43021675ed7a65d3429e30b96b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000210000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000300ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000012556e6973776170563300000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000d71a8003cc920fa000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000042a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480001f42260fac5e5542a773aa44fbcfedf7c193bc2c5990001f4c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007448c7456a97769f6cd04f1e83a4a23ccdc46abd000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd00000000000000000000000026c16b6926637cf5eb62c42991b4166add66ff9e000000000000000000000000000000005f3ab423ca7cfd343ceae80be4c9dc99000000000000000000000000000000000000000000000000'
        await helpers.time.increase(depositDuration+3600);
        expect(
            await maverickManage.connect(addr1).withdraw(0, '0x'+swapData.slice(10))
        ).to.changeTokenBalance(wETH, maverickManage, ethers.parseEther('1'));
        console.log(`wETH balance after withdraw: ${parseUnit(await wETH.balanceOf(maverickManage),18)}`);
    }).timeout(200*1000)
})
